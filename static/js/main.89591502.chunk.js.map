{"version":3,"sources":["firebase.js","components/navbar/Navbar.jsx","components/chatheads/ChatHeads.jsx","components/conversation/Conversation.jsx","screens/chat-screen/ChatScreen.jsx","screens/login-screen/LoginScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","auth","getAuth","Navbar","user","setUser","history","useHistory","className","email","onClick","localStorage","setItem","push","ChatHeads","items","setreceiver","map","obj","i","title","Conversation","receiver","useState","conversationId","setConversationId","messages","setMessages","lastmessageencrypted","setlastmessageencrypted","lastmessagedecrypted","setlastmessagedecrypted","messagesent","setmessagesent","secretkey","setsecretkey","messageencrypted","setMessageencrypted","dhprime","setdhprime","dhgenerator","setdhgenerator","senderpriv","setsenderpriv","senderpub","setsenderpub","currentMessage","useRef","chatBodyRef","CryptoJS","require","sendMessage","a","current","value","sharedsecret","toString","ciphertext","AES","encrypt","myMessage","message","uid","conversationRef","doc","getDoc","docSnap","exists","docData","data","updateDoc","setDoc","setSecretKey","dhRef","prime","dhgen","generator","pubkeyRef","docSnap1","docData1","privkey","pubkey","privkeyRef","docSnap2","docData2","receiverpub","sharedSecret","power","myConvId","React","useEffect","onSnapshot","currentData","length","forEach","element","bytes","decrypt","enc","Utf8","style","scrollBehaviour","scrollTop","scrollHeight","ref","justifyContent","placeholder","onKeyPress","e","code","key","shiftKey","readonly","onChange","target","e1","e2","e3","b","p","res","ChatScreen","chatHeads","setchatHeads","JSON","parse","getItem","getDocs","collection","querySnapshot","docs","filter","LoginScreen","password","register","myEmail","myPassword","createUserWithEmailAndPassword","responseFromAuth","userId","min","max","Math","floor","random","stringify","alert","login","signInWithEmailAndPassword","type","App","primitiveroot","primestring","createDiffieHellman","getPrime","parseInt","n","s","Set","primitiveroots","phi","add","sqrt","findPrimefactors","r","flag","findPrimitive","setInterval","setdhparams","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89591502.chunk.js","sourcesContent":["//Setting firebase for our chat-app\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {getAuth} from \"firebase/auth\";\nimport {getFirestore} from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDFsbNI7hBo3oZHR2oZpsrB_2Gh0BFvZ10\",\n  authDomain: \"chat-app-46f76.firebaseapp.com\",\n  projectId: \"chat-app-46f76\",\n  storageBucket: \"chat-app-46f76.appspot.com\",\n  messagingSenderId: \"393297397408\",\n  appId: \"1:393297397408:web:3b02e01c9e425aadf46bc5\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nconst db = getFirestore();\nconst auth = getAuth();\n\nexport {auth, db};","import React from 'react'\nimport { useHistory } from 'react-router-dom';\nimport \"./navbar.css\";\n\nexport default function Navbar({ user, setUser}) {\n\nlet history = useHistory();\n\nconst logout = () => {  //Method to log out\n  localStorage.setItem(\"user\",null);  //Removing user from localstorage\n  setUser(null);  //Setting user back to null\n  history.push(\"/\"); //Going back to login screen\n}\n\n  return (  //Navigation bar with a welcome message if logged in and log out button. If not logged in we ask user to log in\n    \n    \n    <div className='navbar-container'>\n        {user ? (\n        <div className='navbar-user'>\n          <p>{user.email}</p><br /><br />\n          <button className='logout' onClick={logout}>Log out</button>\n        </div>\n         ) : (\n        <div className='navbar-content'>\n          <p>Login to use chat</p>\n        </div>\n         )}\n         <p className='appname'>SecureChat</p>\n         <p></p>\n    </div>\n    \n )\n}\n","import React from 'react'\r\nimport \"./chatheads.css\";\r\n\r\nexport default function ChatHeads({items, setreceiver}) {\r\n  \r\n  return (  //Rendering all the available users from firebase with a profile picture and their username Clicking the username sets them as the receiver\r\n    <div>\r\n        <p>Users</p>\r\n        {items.map((obj, i) => (\r\n            <div key={i} className =\"chat-head-item\" onClick={() => setreceiver(obj)}>\r\n                <div className='user-profile-pic'>\r\n                    <p className='user-profile-pic-text'>{obj.email[0]}</p>\r\n                </div>\r\n                <p className='username' title={obj.email}>{obj.email}</p>\r\n            </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nimport { doc, getDoc, updateDoc, setDoc, onSnapshot } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase\";\r\nimport \"./conversation.css\";\r\n\r\nexport default function Conversation({ receiver, user }) {\r\n  const [conversationId, setConversationId] = useState(null); //Initially conversation id is null\r\n  const [messages, setMessages] = useState([]); //Initializing empty array to store messages\r\n  var [lastmessageencrypted,setlastmessageencrypted] = useState(\"\");  //To handle encryption and decryption process\r\n  var [lastmessagedecrypted,setlastmessagedecrypted] = useState(\"\");\r\n  var [messagesent,setmessagesent] = useState(\"\");  //Storing the sent message\r\n  var [secretkey,setsecretkey] = useState(\"\");  //Secret key for AES\r\n  var [messageencrypted,setMessageencrypted] = useState(\"\");  //Storing the encrypted version of the sent message\r\n\r\n  var [dhprime,setdhprime] = useState(\"\");\r\n  var [dhgenerator,setdhgenerator] = useState(\"\");\r\n  var [senderpriv,setsenderpriv] = useState(\"\");\r\n  var [senderpub,setsenderpub] = useState(\"\");\r\n\r\n  const currentMessage = useRef(null);    //Current message reference initialized to null\r\n  const chatBodyRef = useRef(null); //To make the chat screen scrollable\r\n\r\n  var CryptoJS = require(\"crypto-js\");\r\n\r\n  // handle sending the messages\r\n  const sendMessage = async () => {\r\n    if (!currentMessage.current.value) return;\r\n\r\n    messagesent = currentMessage.current.value; //Message entered by the user\r\n    setmessagesent(messagesent);\r\n    \r\n    // Encrypt\r\n    const sharedsecret = secretkey.toString(); //Getting the Diffie Hellman shared secret key\r\n    \r\n    var ciphertext = CryptoJS.AES.encrypt(currentMessage.current.value, sharedsecret).toString(); //Encryption\r\n    messageencrypted = ciphertext;\r\n    setMessageencrypted(messageencrypted);\r\n\r\n    const myMessage = { //Uid and ciphertext of message entered by the user in a message object\r\n\r\n      message: ciphertext,\r\n      uid: user.uid,\r\n    };\r\n    \r\n    // add and save encrypted message to firestore\r\n    const conversationRef = doc(db, \"conversations\", conversationId);\r\n    const docSnap = await getDoc(conversationRef);\r\n\r\n    // append message to existing conversation\r\n    //If conversation already exists\r\n    if (docSnap.exists()) {\r\n      const docData = docSnap.data();\r\n      await updateDoc(conversationRef, {\r\n        messages: [...docData.messages, myMessage],\r\n      });\r\n\r\n      \r\n    } else {\r\n      // create a new conversation\r\n      await setDoc(doc(db, \"conversations\", conversationId), {\r\n        messages: [myMessage],\r\n      });\r\n    }\r\n\r\n    ciphertext = \"\";\r\n    currentMessage.current.value = \"\";\r\n  };\r\n\r\n  //Method to compute the Diffie Hellman shared secret key\r\n  const setSecretKey = async () => {\r\n    var dhprime,dhgen,receiverpub,senderpriv,senderpub;  //Required variables\r\n\r\n    if (!receiver || !user) return; //If no receiver is selected we return\r\n\r\n    setmessagesent(\"\");\r\n    setMessageencrypted(\"\");\r\n    setlastmessageencrypted(\"\");\r\n    setlastmessagedecrypted(\"\");\r\n\r\n    \r\n    const dhRef = doc(db, \"dhparameters\", \"dh\");  //Getting the DH prime and generator from the dhparameters collection in firebase\r\n    const docSnap = await getDoc(dhRef);\r\n\r\n    if (docSnap.exists()) {\r\n        const docData = docSnap.data();\r\n        dhprime = docData.prime;\r\n        setdhprime(dhprime);\r\n        dhgen = docData.generator\r\n        setdhgenerator(dhgen);\r\n    }\r\n\r\n    const pubkeyRef = doc(db,\"users\",user.uid); //Getting the sender's private and public key from the users collection in firebase\r\n    const docSnap1 = await getDoc(pubkeyRef);\r\n\r\n    if(docSnap1.exists()) {\r\n      const docData1 = docSnap1.data();\r\n      senderpriv = docData1.privkey;\r\n      setsenderpriv(senderpriv);\r\n      senderpub = docData1.pubkey;\r\n      setsenderpub(senderpub);\r\n    }\r\n\r\n    const privkeyRef = doc(db,\"users\",receiver.uid);  ////Getting the receiver's public key from the users collection in firebase\r\n    const docSnap2 = await getDoc(privkeyRef);\r\n\r\n    if(docSnap2.exists()) {\r\n      const docData2 = docSnap2.data();\r\n      receiverpub = docData2.pubkey;\r\n    }\r\n\r\n    let sharedSecret = power(receiverpub,senderpriv,dhprime); //Computing the value of the shared secret\r\n    setsecretkey(sharedSecret);\r\n    let myConvId;\r\n\r\n    if (receiver.uid > user.uid) myConvId = receiver.uid + user.uid;  //Appending the ids in alphabetical order to get the Conversation id in the database\r\n    else myConvId = user.uid + receiver.uid;\r\n\r\n    setConversationId(myConvId);\r\n  }\r\n\r\n  // set conversationId\r\n  React.useEffect(() => {\r\n    setSecretKey(); //Calculating the Diffie Hellman shared secret\r\n  }, [receiver, user]);\r\n\r\n  // get converastion from firestore\r\n  React.useEffect(() => {\r\n    if (!conversationId || !secretkey) return;\r\n\r\n    const sharedsecret = secretkey.toString();  //Getting the Diffie Hellman shared secret key\r\n\r\n    const unsub = onSnapshot(\r\n      doc(db, \"conversations\", conversationId), //Conversations collection in firebase\r\n      (doc) => {\r\n        const currentData = doc.data(); //Getting the data (All messages)\r\n\r\n        if (currentData?.messages.length > 0) {   //For each message\r\n          \r\n          currentData.messages.forEach(element => {\r\n            lastmessageencrypted = element.message; //Collecting encrypted message\r\n\r\n            //Decryption of message with DH shared secret\r\n            var bytes  = CryptoJS.AES.decrypt(element.message, sharedsecret);\r\n            element.message = bytes.toString(CryptoJS.enc.Utf8);\r\n            lastmessagedecrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n          });\r\n\r\n          //Before decryption\r\n          setlastmessageencrypted(lastmessageencrypted);\r\n          \r\n          //After decryption\r\n          setlastmessagedecrypted(lastmessagedecrypted);\r\n          setMessages(currentData.messages); //Setting message to screen\r\n          \r\n        }\r\n        else setMessages([]); //If tere are no messages in the conversation\r\n      }\r\n    );\r\n\r\n    return unsub;\r\n  }, [conversationId]);\r\n\r\n  // send message with enter\r\n  const handleEnterKeyPressDown = (e) => {\r\n    if ((e.code === \"Enter\" || e.key === \"Enter\") && !e.shiftKey) {\r\n      sendMessage();\r\n      currentMessage.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  //Scroll to bottom of the chat\r\n  const scrollToBottomOfChat = () => {\r\n    if(!chatBodyRef.current) return;\r\n    chatBodyRef.current.style.scrollBehaviour = \"smooth\";\r\n    chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    scrollToBottomOfChat();\r\n  },[messages,chatBodyRef]); \r\n\r\n  return (\r\n    <div className=\"chatscreen\">\r\n      \r\n      {receiver ? ( //If we have a receiver\r\n        <div className=\"chat\">\r\n          <p>Conversation with {receiver.email}</p>\r\n\r\n          {/* Conversation messages */}\r\n          <div className=\"conversation-messages\" ref={chatBodyRef}>\r\n            {messages.map((obj, i) => (\r\n                <div key={i} className = \"message-container\" style={{justifyContent:obj.uid === user.uid && \"flex-end\"}}>\r\n                  <div className=\"message-content\">{obj.message}</div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n\r\n          {/* Input bar to enter messages */}\r\n            <div className=\"input-container\">\r\n                <div className=\"input-message\">\r\n                    <br/><input placeholder=\"Enter message\" ref={currentMessage}  onKeyPress={handleEnterKeyPressDown}/>\r\n                </div>\r\n            <button onClick={sendMessage} currentMessage=\"Hello\">Go</button>\r\n          </div>\r\n        </div>\r\n      ) : ( //If no receiver\r\n        <div className=\"nochat\">\r\n          <p>Pick someone to talk to.</p>\r\n        </div>\r\n      )}\r\n\r\n      {/*Showing encryption and decryption process on the screen*/}\r\n\r\n{receiver ? (\r\n<div className=\"encryption-details\"> \r\n        <div className='encryption-elements'>\r\n          <form>\r\n            <br/>\r\n            &emsp;Diffie Hellman Prime:<br /> &emsp;<input value={dhprime} readonly=\"readonly\" ></input><br/><br/>\r\n\r\n            &emsp;Diffie Hellman Generator:<br /> &emsp;<input value={dhgenerator} readonly></input><br/><br/>\r\n            \r\n            &emsp;Chosen private key:<br /> &emsp;<input value={senderpriv} readonly></input><br/><br/>\r\n            \r\n            &emsp;Public key:<br /> &emsp;<input value={senderpub} readonly></input><br/><br/>\r\n            \r\n            &emsp;Secret key from DH for AES:<br /> &emsp;<input value={secretkey} readonly></input><br/><br/>\r\n\r\n            &emsp;Sent message is:<br /> &emsp;<input value={messagesent} readonly=\"readonly\" onChange={(e) => setmessagesent(e.target.value)}/><br/><br/>\r\n\r\n            &emsp;Message encrypted as:<br /> &emsp;<input value={messageencrypted} readonly=\"readonly\" onChange={(e1) => setMessageencrypted(e1.target.value)} /><br/><br/>\r\n\r\n            &emsp;Incoming message is :<br /> &emsp;<input value={lastmessageencrypted} readonly=\"readonly\" onChange={(e2) => lastmessageencrypted(e2.target.value)} /><br/><br/>\r\n\r\n            &emsp;Message decrypted as:<br /> &emsp;<input value={lastmessagedecrypted} readonly=\"readonly\" onChange={(e3) => lastmessagedecrypted(e3.target.value)} /><br/><br/>\r\n            </form>\r\n          \r\n        </div>\r\n      </div>\r\n):(\r\n  <div></div>\r\n)}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Power function to return value of a ^ b mod P  Source: https://www.geeksforgeeks.org/how-to-avoid-overflow-in-modular-multiplication/#:~:text=We%20can%20multiply%20recursively%20to,to%20log%20n%20exponentiation%20algorithm).\r\nfunction power(a, b, p){\r\n  let res = 0; //Initialize result\r\n  a = a % p;\r\n  while (b > 0){\r\n      // If b is odd, add 'a' to result\r\n      if (b % 2 == 1){\r\n          res = (res + a) % p;\r\n      }\r\n\r\n      // Multiply 'a' with 2\r\n      a = (a * 2) % p;\r\n\r\n      // Divide b by 2\r\n      b =b/2;\r\n  }\r\n   \r\n  // Return result\r\n  return res % p;\r\n}\r\n","import { collection, getDocs } from 'firebase/firestore';\nimport React, {useState} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ChatHeads from '../../components/chatheads/ChatHeads';\nimport Conversation from '../../components/conversation/Conversation';\nimport { db } from '../../firebase';\nimport \"./chat-screen.css\";\n\nexport default function ChatScreen({setUser,user}) {\n\nlet history = useHistory();\n\nconst [chatHeads, setchatHeads] = useState([]); //Initially no chat heads so empty array\nconst [receiver, setreceiver] = useState(null); //Since no receiver is clicked yet reciever is initially null\n\nReact.useEffect(() => { //Checking if the user is logged in\n  //Getting user from localstorage\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n\n  //Setting log in state for the user as active\n  if(user) setUser(user);\n  //If not logged in we go back to the login screen\n  else history.push(\"/\");\n\n},[history,setUser]);\n\nReact.useEffect(() => { //To fetch the available users from firebase\n  if(!user) return; //If not logged in we return back\n\n  (async() => { \n    const querySnapshot = await getDocs(collection(db,\"users\"));  //Querying for all the users\n    setchatHeads( //Setting the chatheads on the screen to the query results\n      querySnapshot.docs\n      .map((doc) => doc.data())\n      .filter((obj) => obj.uid !== user.uid)\n      );\n  })();\n\n},[user]);\n\n  return (\n    <div className='chat-screen'>\n        <div className='half-screen chat-heads'>\n          {/*Chatheads with available users to chat to */}\n          <ChatHeads items={chatHeads} setreceiver={setreceiver} />\n        </div>\n\n        <div className='half-screen conversation'>\n          {/*Conversation screen to chat with the selected receiver */}\n          <Conversation receiver={receiver} user={user} />\n        </div>\n\n\n    </div>\n  )\n}\n","import { createUserWithEmailAndPassword } from '@firebase/auth';\nimport { addDoc, collection ,getDoc, setDoc, doc} from '@firebase/firestore';\nimport React,{useRef} from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { db,auth } from '../../firebase';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport \"./login-screen.css\";\nexport default function LoginScreen({setUser}) {\n\n  let history = useHistory();\n\n  const Crypto = require('crypto'); \n  var generator = 0; //Diffie Hellman Prime and Generator value initialized to 0\n  var prime = 0;\n\n  const email = useRef(null);   //Reference for email initially null\n  const password = useRef(null);    //Reference for password initially null\n\n  const register = async() => { //Method to register\n    const myEmail = email.current.value;    //Getting the user input\n    const myPassword = password.current.value;\n\n    try {\n        const responseFromAuth = await createUserWithEmailAndPassword(  //Waiting for a response from firebase authentication (user creation)\n            auth,\n            myEmail,\n            myPassword\n        );\n        \n        const userId = responseFromAuth.user.uid;   //uid from authentication response\n\n        const dhRef = doc(db, \"dhparameters\", \"dh\");    //Getting the Diffie Hellman parameters\n        const docSnap = await getDoc(dhRef);\n\n        if (docSnap.exists()) {\n            const docData = docSnap.data();\n            generator = docData.generator;\n            prime = docData.prime;\n        }\n\n        const privkey = randomint(5,generator-1); //Choosing a random private key which is lesser than the generator value\n        const pubkey = power(generator,privkey,prime);  //Computing the public key from the private key\n\n\n        //Saving to firestore\n        await setDoc(doc(db,\"users\",userId),{   //Creating a new collection\n            email:myEmail,\n            uid:userId,\n            privkey:privkey,\n            pubkey:pubkey,\n        });\n\n        //Saving user to localstorage\n        localStorage.setItem(\n            \"user\",\n            JSON.stringify({\n                email:myEmail,\n                uid:userId,\n            })\n        );\n\n        //Setting the signed in user as active\n        setUser({\n            email:myEmail,\n            uid:userId,\n            \n        });\n\n        //Moving to chat screen\n        history.push('/chat');\n\n    } catch (error) {\n        alert(error);\n    }\n  };\n\n  const login = async() => {    //Method to log in\n    const myEmail = email.current.value;    //Getting credentials entered by the user\n    const myPassword = password.current.value;\n\n    try {   //Getting response from the firebase authentication sign in\n        const responseFromAuth = await signInWithEmailAndPassword(\n            auth,\n            myEmail,\n            myPassword\n        );\n        \n        const userId = responseFromAuth.user.uid;   //Getting the uid from authentication response\n\n\n        //Saving the user to localstorage setting the user to logged in state\n        localStorage.setItem(\n            \"user\",\n            JSON.stringify({\n                email:myEmail,\n                uid:userId\n            })\n        );\n\n        //Setting the signed in user as active\n        setUser({\n            email:myEmail,\n            uid:userId,\n        });\n\n        //Moving to chat screen\n        history.push('/chat');\n\n    } catch (error) {\n        alert(error);\n    }\n  };\n\n  React.useEffect(() => {\n    //Getting the user from localstorage\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    \n    //if users state is logged in then dont allow to login again (stay on chat screen)\n    if(user){\n        setUser(user);\n        history.push('/chat');\n    }\n  },[history, setUser]);\n    \n  return ( //Login screen with username and password text boxes\n    <div className='login-screen'>\n        <div className='title'>\n            <p className='title'>Login Screen</p><br />\n        </div>\n\n        <div className='mail'>\n            <h3 className='input'>&emsp;&ensp;Email: <input ref={email}/></h3>\n        </div>\n\n        <div className='password'>\n            <h3 className='input'>Password:  <input type = 'password' ref={password} /></h3>\n        </div>\n        \n        <div className='buttongrp'>\n        <button className='button' onClick={register}>Register</button>&ensp;\n        <button className='button' onClick={login}>Log in</button>\n        </div>\n    </div>\n  )\n}\n\nfunction randomint(min, max)    //Function to return a random integer within a range\n{\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\n// Power function to return value of a ^ b mod P\nfunction power(a, b, p)\n{\n    let res = 0; //Initialize result\n    a = a % p;\n    while (b > 0){\n        // If b is odd, add 'a' to result\n        if (b % 2 == 1){\n            res = (res + a) % p;\n        }\n  \n        // Multiply 'a' with 2\n        a = (a * 2) % p;\n  \n        // Divide b by 2\n        b =b/2;\n    }\n     \n    // Return result\n    return res % p;\n}","import React, { useState } from \"react\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { db } from './firebase'\nimport {doc,setDoc,getDoc} from 'firebase/firestore';\nimport Navbar from \"./components/navbar/Navbar\";\nimport ChatScreen from \"./screens/chat-screen/ChatScreen\";\nimport LoginScreen from \"./screens/login-screen/LoginScreen\";\nimport \"./App.css\"\n\nfunction App() {\n  const [user, setUser] = useState(null); //User of the chat app initially set to null before log in\n\n  var Crypto = require(\"crypto\");\n  let dh = Crypto.createDiffieHellman(20); //Creating a Diffie Hellman object\n  let primestring = dh.getPrime().toString(\"hex\");  //Getting the DH Prime number\n  let prime = parseInt(primestring,16);\n\n  var primitiveroot = []; \n  primitiveroot = findPrimitive(prime); //Getting few primitive roots in a range for the prime number \n  let generator = primitiveroot[Math.floor(Math.random()*primitiveroot.length)];  //Choosing a random primitive root from the array as the DH generator\n  \n\n  React.useEffect(()=> {\n    setInterval(()=> setdhparams(prime,generator),1000);  //Setting the DH parameters into the database\n  },[]);\n\n  \n\n  return ( //Creating the various components and routes which will be rendered onto the screen\n    <div>\n      <Router>\n        {/* Navigation bar*/}\n        <div className=\"navbar\"><Navbar user={user} setUser={setUser} /> </div>\n\n        <Switch>\n          {/* Chat screen with user details*/}\n          <Route path=\"/chat\">\n            <ChatScreen user={user} setUser={setUser} />\n          </Route>\n          {/* Login screen with user details initially as null*/}\n          <Route path=\"/\">\n            <LoginScreen user={user} setUser={setUser} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nasync function setdhparams(prime,generator) //Function to create the Diffie Hellman parameters\n{\n    const dhRef = doc(db, \"dhparameters\", \"dh\");  //Reference of the firebase document for the DH parameters\n    const docSnap = await getDoc(dhRef);  //Getting the DH parameters document\n\n    if (!docSnap.exists()) {\n      await setDoc(doc(db, \"dhparameters\", \"dh\"), { //Setting the DH parameters to the document\n        prime:prime,\n        generator:generator,\n      });\n    }\n}\n\n// Iterative Function to calculate (x^n)%p \n   \nfunction power(a, b, p){\n  let res = 0; //Initialize result\n  a = a % p;\n  while (b > 0){\n      // If b is odd, add 'a' to result\n      if (b % 2 == 1){\n          res = (res + a) % p;\n      }\n\n      // Multiply 'a' with 2\n      a = (a * 2) % p;\n\n      // Divide b by 2\n      b =b/2;\n  }\n   \n  // Return result\n  return res % p;\n}\n\n// Function to store prime factors of a number\nfunction findPrimefactors(s, n) {\n  // Print the number of 2s that divide n\n  while (n % 2 == 0) {\n      s.add(2);\n      n = n / 2;\n  }\n\n  // n must be odd at this point. So we can skip one element (Note i = i +2)\n  for (let i = 3; i <= Math.sqrt(n); i = i + 2) {\n      // While i divides n, print i and divide n\n      while (n % i == 0) {\n          s.add(i);\n          n = n / i;\n      }\n  }\n\n  // This condition is to handle the case when n is a prime number greater than 2\n  if (n > 2)\n      s.add(n);\n}\n\n// Function to find smallest primitive root of n\nfunction findPrimitive(n) {\n  let s = new Set();\n  let primitiveroots = [];\n\n  // Find value of Euler Totient function of n\n  let phi = n - 1;\n\n  // Find prime factors of phi and store in a set\n  findPrimefactors(s, phi);\n\n  // Check for every number from 2 to phi\n  for (let r = 20; r <= 200; r++) {\n      // Iterate through all prime factors of phi and check if we found a power with value 1\n      let flag = false;\n      for (let it of s) {\n\n          // Check if r^((phi)/primefactors) mod n is 1 or not\n          if (power(r, phi / it, n) == 1) {\n              flag = true;\n          }\n      }   \n\n      // If there was no power with value 1.\n      if (flag == false)\n          primitiveroots.push(r);\n  }\n\n  return primitiveroots;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}